<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\PD_TEST_S5.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\PD_TEST_S5.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Aug 02 17:00:13 2022
<BR><P>
<H3>Maximum Stack Usage =        220 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; CAN_Init &rArr; CAN_Open &rArr; CAN_SetBaudRate &rArr; CLK_GetPCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[24]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ACMP_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[23]">ADC_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[2a]">ADC_SampleTimerTask</a> from bsp.o(i.ADC_SampleTimerTask) referenced from bsp.o(i.ADC_AvgSampleStart)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1a]">CAN0_IRQHandler</a> from can_drv.o(i.CAN0_IRQHandler) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1b]">CAN1_IRQHandler</a> from can_drv.o(i.CAN1_IRQHandler) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[24]">Default_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[8]">EINT0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[9]">EINT1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[27]">Hard_Fault_Handler</a> from retarget.o(i.Hard_Fault_Handler) referenced from retarget.o(.emb_text)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[21]">I2S_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[20]">PDMA_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1e]">PS2_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[c]">PWMA_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[d]">PWMB_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[22]">PWRWU_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[25]">RTC_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[2d]">Reset_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1c]">SC012_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[16]">SPI2_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[17]">SPI3_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from bsp.o(i.SysTick_Handler) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[28]">SystemInit</a> from system_nuc230_240.o(i.SystemInit) referenced from startup_nuc230_240.o(.text)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[12]">UART02_IRQHandler</a> from uart_process.o(i.UART02_IRQHandler) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from uart_process.o(i.UART1_IRQHandler) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1d]">USBD_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[29]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc230_240.o(.text)
 <LI><a href="#[2c]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[2b]">fputc</a> from retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[29]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[30]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[a5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SC012_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_SetLineConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_Open
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChanVolt
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_info_by_can
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NormalModeTx
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_GetClock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_update_spt
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardMsgToUart
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1IrqHandler
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_info_by_can
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[ae]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[af]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>ADC_AvgSampleStart</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp.o(i.ADC_AvgSampleStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_AvgSampleStart &rArr; SoftTimerStart &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerStart
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleInit
</UL>

<P><STRONG><a name="[3f]"></a>ADC_GetAvgSampleData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp.o(i.ADC_GetAvgSampleData))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChanVolt
</UL>

<P><STRONG><a name="[3e]"></a>ADC_GetChanVolt</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, bsp.o(i.ADC_GetChanVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_GetChanVolt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetAvgSampleData
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_info_by_can
</UL>

<P><STRONG><a name="[42]"></a>ADC_Open</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, adc.o(i.ADC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleInit
</UL>

<P><STRONG><a name="[41]"></a>ADC_SampleInit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, bsp.o(i.ADC_SampleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC_SampleInit &rArr; ADC_AvgSampleStart &rArr; SoftTimerStart &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AvgSampleStart
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>ADC_SampleTimerTask</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, bsp.o(i.ADC_SampleTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_SampleTimerTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.ADC_AvgSampleStart)
</UL>
<P><STRONG><a name="[43]"></a>BoardComInit</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, uart_process.o(i.BoardComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = BoardComInit &rArr; SC2ComInit &rArr; SCUART_SetLineConfig &rArr; SCUART_GetClock &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC2ComInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>BoardIoInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bsp.o(i.BoardIoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BoardIoInit &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioToPort
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>CAN0_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, can_drv.o(i.CAN0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CAN0_IRQHandler &rArr; CAN_MsgInterrupt &rArr; ForwardMsgToUart &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CLR_INT_PENDING_BIT
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgRemove
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFreeMsgQueue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NormalModeTx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CAN1_IRQHandler</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, can_drv.o(i.CAN1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CAN1_IRQHandler &rArr; CAN_MsgInterrupt &rArr; ForwardMsgToUart &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CLR_INT_PENDING_BIT
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgRemove
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFreeMsgQueue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NormalModeTx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN_BasicReceiveMsg</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, can.o(i.CAN_BasicReceiveMsg))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[54]"></a>CAN_CLR_INT_PENDING_BIT</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, can.o(i.CAN_CLR_INT_PENDING_BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_CLR_INT_PENDING_BIT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>CAN_ClearAllRecvId</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, can_drv.o(i.CAN_ClearAllRecvId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_ClearAllRecvId
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[55]"></a>CAN_Close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can.o(i.CAN_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_Close &rArr; CAN_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[56]"></a>CAN_DisableInt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, can.o(i.CAN_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DisableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LeaveInitMode
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Close
</UL>

<P><STRONG><a name="[59]"></a>CAN_EnableInt</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, can.o(i.CAN_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LeaveInitMode
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[57]"></a>CAN_EnterInitMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(i.CAN_EnterInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DisableInt
</UL>

<P><STRONG><a name="[66]"></a>CAN_EnterTestMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can.o(i.CAN_EnterTestMode))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Open
</UL>

<P><STRONG><a name="[5a]"></a>CAN_Init</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, can_drv.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = CAN_Init &rArr; CAN_Open &rArr; CAN_SetBaudRate &rArr; CLK_GetPCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisableModuleClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Open
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Close
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearAllRecvId
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>CAN_IsNewDataReceived</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, can.o(i.CAN_IsNewDataReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_IsNewDataReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadMsgObj
</UL>

<P><STRONG><a name="[58]"></a>CAN_LeaveInitMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, can.o(i.CAN_LeaveInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnableInt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DisableInt
</UL>

<P><STRONG><a name="[53]"></a>CAN_MsgInterrupt</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, can_drv.o(i.CAN_MsgInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CAN_MsgInterrupt &rArr; ForwardMsgToUart &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardMsgToUart
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgRemove
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NormalModeTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>CAN_NormalModeTx</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, can_drv.o(i.CAN_NormalModeTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_NormalModeTx &rArr; CAN_SetTxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TriggerTxMsg
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTxMsg
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TriggerQueueSend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>CAN_Open</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, can.o(i.CAN_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = CAN_Open &rArr; CAN_SetBaudRate &rArr; CLK_GetPCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterTestMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[67]"></a>CAN_ReadMsgObj</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, can.o(i.CAN_ReadMsgObj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_ReadMsgObj &rArr; CAN_IsNewDataReceived
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsNewDataReceived
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[61]"></a>CAN_Receive</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_Receive &rArr; CAN_ReadMsgObj &rArr; CAN_IsNewDataReceived
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ReadMsgObj
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_BasicReceiveMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
</UL>

<P><STRONG><a name="[65]"></a>CAN_SetBaudRate</STRONG> (Thumb, 406 bytes, Stack size 96 bytes, can.o(i.CAN_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CAN_SetBaudRate &rArr; CLK_GetPCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_update_spt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLKFreq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_LeaveInitMode
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Open
</UL>

<P><STRONG><a name="[63]"></a>CAN_SetTxMsg</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, can.o(i.CAN_SetTxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_SetTxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFreeIF
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NormalModeTx
</UL>

<P><STRONG><a name="[6e]"></a>CAN_TriggerQueueSend</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, can_drv.o(i.CAN_TriggerQueueSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_TriggerQueueSend &rArr; CAN_NormalModeTx &rArr; CAN_SetTxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NormalModeTx
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_info_by_can
</UL>

<P><STRONG><a name="[64]"></a>CAN_TriggerTxMsg</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, can.o(i.CAN_TriggerTxMsg))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NormalModeTx
</UL>

<P><STRONG><a name="[5f]"></a>CLK_DisableModuleClock</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, clk.o(i.CLK_DisableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_DisableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[6f]"></a>CLK_EnableCKO</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, clk.o(i.CLK_EnableCKO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLK_EnableCKO &rArr; CLK_SetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[44]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimerInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC2ComInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardComInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[70]"></a>CLK_EnablePLL</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[8a]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[6b]"></a>CLK_GetPCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(i.CLK_GetPCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetPCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[76]"></a>CLK_SetCoreClock</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[77]"></a>CLK_SetHCLK</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[45]"></a>CLK_SetModuleClock</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimerInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC2ComInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardComInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[71]"></a>CLK_WaitClockReady</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[78]"></a>CanAllocMsg</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, can_drv.o(i.CanAllocMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CanAllocMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_info_by_can
</UL>

<P><STRONG><a name="[50]"></a>CanFreeMsgQueue</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, can_drv.o(i.CanFreeMsgQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CanFreeMsgQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>CanMsgQueueSortedInsert</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, can_drv.o(i.CanMsgQueueSortedInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CanMsgQueueSortedInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_info_by_can
</UL>

<P><STRONG><a name="[51]"></a>CanMsgRemove</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, can_drv.o(i.CanMsgRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CanMsgRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>DisableInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.DisableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgQueueSortedInsert
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAllocMsg
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgRemove
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFreeMsgQueue
</UL>

<P><STRONG><a name="[7a]"></a>EnableInterrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp.o(i.EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgQueueSortedInsert
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAllocMsg
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgRemove
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFreeMsgQueue
</UL>

<P><STRONG><a name="[4e]"></a>GPIO_SetMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardIoInit
</UL>

<P><STRONG><a name="[9d]"></a>GetRunTime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp.o(i.GetRunTime))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>GpioToPort</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp.o(i.GpioToPort))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardIoInit
</UL>

<P><STRONG><a name="[27]"></a>Hard_Fault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget.o(i.Hard_Fault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[80]"></a>HardwareTimerInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp.o(i.HardwareTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HardwareTimerInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[86]"></a>SC2SendRadarData</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart_process.o(i.SC2SendRadarData))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SC2SendRadarData &rArr; SCUART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>SCUART_Open</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, scuart.o(i.SCUART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SCUART_Open &rArr; SCUART_GetClock &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_GetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC2ComInit
</UL>

<P><STRONG><a name="[85]"></a>SCUART_SetLineConfig</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, scuart.o(i.SCUART_SetLineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SCUART_SetLineConfig &rArr; SCUART_GetClock &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_GetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC2ComInit
</UL>

<P><STRONG><a name="[87]"></a>SCUART_Write</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, scuart.o(i.SCUART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SCUART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC2SendRadarData
</UL>

<P><STRONG><a name="[89]"></a>SYS_Init</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, main.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>SYS_ResetModule</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardComInit
</UL>

<P><STRONG><a name="[8c]"></a>SendChar</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, retarget.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8d]"></a>SendChar_ToUART</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[3c]"></a>SoftTimerAlloc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp.o(i.SoftTimerAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftTimerAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AvgSampleStart
</UL>

<P><STRONG><a name="[91]"></a>SoftTimerInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, bsp.o(i.SoftTimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[3d]"></a>SoftTimerStart</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bsp.o(i.SoftTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SoftTimerStart &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AvgSampleStart
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 398 bytes, Stack size 16 bytes, bsp.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, system_nuc230_240.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLKFreq
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[28]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc230_240.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[82]"></a>TIMER_Open</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimerInit
</UL>

<P><STRONG><a name="[90]"></a>TimersInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp.o(i.TimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TimersInit &rArr; HardwareTimerInit &rArr; TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimerInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableCKO
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>UART02_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_process.o(i.UART02_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_process.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART1_IRQHandler &rArr; Uart1IrqHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART_EnableInt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart.o(i.UART_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EnableInt
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardComInit
</UL>

<P><STRONG><a name="[47]"></a>UART_Open</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART_Open &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardComInit
</UL>

<P><STRONG><a name="[48]"></a>UART_SetLine_Config</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, uart.o(i.UART_SetLine_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = UART_SetLine_Config &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardComInit
</UL>

<P><STRONG><a name="[92]"></a>Uart1IrqHandler</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, uart_process.o(i.Uart1IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Uart1IrqHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>WDT_Feed</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp.o(i.WDT_Feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>WDT_Open</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, wdt.o(i.WDT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[4f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardMsgToUart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftTimerStart
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1IrqHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_info_by_can
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NormalModeTx
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>__0snprintf$8</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b2]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[a0]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[40]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_process.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1IrqHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChanVolt
</UL>

<P><STRONG><a name="[b3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2b]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[94]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1IrqHandler
</UL>

<P><STRONG><a name="[7e]"></a>list_insert_tail</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, list.o(i.list_insert_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = list_insert_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardMsgToUart
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1IrqHandler
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = main &rArr; CAN_Init &rArr; CAN_Open &rArr; CAN_SetBaudRate &rArr; CLK_GetPCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC2SendRadarData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRunTime
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardIoInit
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardComInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_power_info_by_can
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForwardMsgToUart
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1IrqHandler
</UL>

<P><STRONG><a name="[9c]"></a>mdelay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp.o(i.mdelay))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = puts &rArr; fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
</UL>

<P><STRONG><a name="[9e]"></a>send_power_info_by_can</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, main.o(i.send_power_info_by_can))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = send_power_info_by_can &rArr; CAN_TriggerQueueSend &rArr; CAN_NormalModeTx &rArr; CAN_SetTxMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMsgQueueSortedInsert
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanAllocMsg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TriggerQueueSend
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChanVolt
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[73]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, system_nuc230_240.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[24]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[4a]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart_process.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardComInit
</UL>

<P><STRONG><a name="[4b]"></a>SC2ComInit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, uart_process.o(i.SC2ComInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SC2ComInit &rArr; SCUART_SetLineConfig &rArr; SCUART_GetClock &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_SetLineConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_Open
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardComInit
</UL>

<P><STRONG><a name="[83]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(i.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimerInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[81]"></a>SYS_UnlockReg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimerInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimersInit
</UL>

<P><STRONG><a name="[62]"></a>ForwardMsgToUart</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, can_drv.o(i.ForwardMsgToUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ForwardMsgToUart &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MsgInterrupt
</UL>

<P><STRONG><a name="[60]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can_drv.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[5d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can_drv.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[5c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, can_drv.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[72]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, clk.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[7f]"></a>stackDump</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, retarget.o(i.stackDump))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stackDump &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[74]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, uart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetLine_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[93]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableInt
</UL>

<P><STRONG><a name="[6d]"></a>GetFreeIF</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, can.o(i.GetFreeIF))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetTxMsg
</UL>

<P><STRONG><a name="[6c]"></a>can_update_spt</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, can.o(i.can_update_spt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can_update_spt &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBaudRate
</UL>

<P><STRONG><a name="[75]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, scuart.o(i.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_GetClock
</UL>

<P><STRONG><a name="[88]"></a>SCUART_GetClock</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, scuart.o(i.SCUART_GetClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SCUART_GetClock &rArr; CLK_GetPLLClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_SetLineConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCUART_Open
</UL>

<P><STRONG><a name="[97]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[9a]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[99]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2c]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
